[Addon]
Script=MPC-HC Now Playing Display
Version=0.24
Author=ZetaEpyon
Desc=Displays now playing information for Media Player Classic - Home Cinema. Requires the MPC-HC web interface.
For=SysReset
Date=Jun 17 2015

[aliases]

[script]
n0=; ----- PUBLIC ALIASES -----
n1=alias vid mpc $1-
n2=
n3=alias mpc {
n4=
n5=  ; Manage debug mode
n6=  if (debug isin $1-) {
n7=    set -e %mpc.debug 1
n8=    if (debug2 isin $1-) { inc %mpc.debug }
n9=    echo 4 -a mpc: Opening socket connection to MPC-HC host
n10=  }
n11=
n12=  debug mpc: Free open hash tables
n13=  if ($hget(MPCVariables)) { hfree MPCVariables }
n14=
n15=  debug mpc: Close open sockets
n16=  if ($sock(mpchc.np)) { sockclose mpchc.np }
n17=
n18=  debug mpc: Load configuration variables into hash table
n19=  mpchash
n20=  set -e %mpc.channel $chan
n21=
n22=  ; Open socket connection to MPC-HC
n23=  if (($len($1) > 0) && ($1 != debug) && ($1 != debug2)) { sockopen mpchc.np $1 $hget(MPCDisplay,1) }
n24=  else { sockopen mpchc.np $hget(MPCDisplay,0) $hget(MPCDisplay,1) }
n25=}
n26=
n27=; ----- SOCKET HANDLING -----
n28=on *:sockopen:mpchc.np:{
n29=
n30=  debug on sockopen: 8Connected to MPC-HC host at $sock($sockname).addr $+ : $+ $sock($sockname).port
n31=  if ($sockerr) { echo 4 -a Unable to connect to MPC-HC host at $sock($sockname).addr $+ : $+ $sock($sockname).port | cleanup | halt }
n32=  else {
n33=    debug on sockopen: Send HTTP request to MPC-HC
n34=    sockwrite -n $sockname GET /variables.html HTTP/1.1
n35=    sockwrite -n $sockname Host: $sock($sockname).ip
n36=    sockwrite -n $sockname $crlf
n37=
n38=    debug on sockopen: Create variables hash table
n39=    hmake MPCVariables
n40=
n41=    debug on sockopen: Reset socket line count
n42=    set %mpc.inc 0
n43=
n44=    debug on sockopen: Force socket read
n45=    sockread
n46=  }
n47=}
n48=
n49=on *:sockread:mpchc.np:{
n50=
n51=  if ($sockerr) { echo 4 -a Error reading from MPC-HC host at $sock($sockname).addr $+ : $+ $sock($sockname).port | cleanup | halt }
n52=  else {
n53=    var %temptext
n54=    sockread %temptext
n55=
n56=    if (%mpc.debug == 2) { debug on sockread: Read line %mpc.inc from MPC-HC variables page: 15 %temptext }
n57=    hadd MPCVariables %mpc.inc %temptext
n58=
n59=    if (%mpc.debug == 2) { debug on sockread: Increment socket line count }
n60=    inc %mpc.inc
n61=
n62=    if ($sockbr == 0) {
n63=      debug on sockread: End of message detected, close socket connection
n64=      sockclose mpchc.np
n65=    }
n66=  }
n67=}
n68=
n69=on *:sockclose:mpchc.np:{
n70=
n71=  debug on sockclose: 8Disconnected from MPC-HC host at $sock($sockname).addr $+ : $+ $sock($sockname).port 15( $+ %mpc.inc lines read)
n72=
n73=  debug on sockclose: Retrieve data from variables hash table
n74=  set -e %mpc.filedir     $nohtml($hget(MPCVariables, 27)) $+ \
n75=  set -e %mpc.filepath    $nohtml($hget(MPCVariables, 25))
n76=  set -e %mpc.filesize    $file(%mpc.filepath).size
n77=  set -e %mpc.position    $nohtml($hget(MPCVariables, 31))
n78=  set -e %mpc.position.ms $nohtml($hget(MPCVariables, 30))
n79=  set -e %mpc.duration    $nohtml($hget(MPCVariables, 33))
n80=  set -e %mpc.duration.ms $nohtml($hget(MPCVariables, 32))
n81=  set -e %mpc.progress    $progress_bar(%mpc.position.ms,%mpc.duration.ms)
n82=  set -e %mpc.filename    $replacecs($remove(%mpc.filepath,%mpc.filedir),_,$chr(32))
n83=
n84=  debug on sockclose: Format filesize as MB or GB
n85=  %mpc.filesize.calc = $calc(%mpc.filesize / 1024) / 1024
n86=  if (%mpc.filesize.calc > 1000) { %mpc.filesize.calc = $round($calc(%mpc.filesize.calc / 1024),2) GB }
n87=  else { %mpc.filesize.calc = $round(%mpc.filesize.calc,2) MB }
n88=
n89=  debug on sockclose: Format duration and position
n90=  if ($left(%mpc.duration,2) == 00) { %mpc.duration = $right(%mpc.duration,-3) | %mpc.position = $right(%mpc.position,-3) }
n91=
n92=  ; Generate debug information
n93=  debug 11Parsed Filepath:15     %mpc.filepath
n94=  debug 11Parsed Filedir:15      %mpc.filedir
n95=  debug 11Parsed Filename:15     %mpc.filename
n96=  debug 11Parsed Position:15     %mpc.position ( $+ %mpc.position.ms $+ ms)
n97=  debug 11Parsed Duration:15     %mpc.duration ( $+ %mpc.duration.ms $+ ms)
n98=  debug 11Calculated Filesize:15 %mpc.filesize.calc ( $+ %mpc.filesize bytes $+ )
n99=  debug 11Calculated Progress:15 %mpc.progress
n100=
n101=  debug on sockclose: Generate formatted ad
n102=  describe %mpc.channel %col1 $+ $hget(MPCDisplay,2) %col1 $+ * %col2 %mpc.progress %mpc.filename %col1 $+ * %col2 $+ %mpc.position / %mpc.duration %col1 $+ * %col2 $+ %mpc.filesize.calc %col1 $+ $hget(MPCDisplay,3)
n103=
n104=  debug on sockclose: Clean up variables and hash tables
n105=  cleanup
n106=}
n107=
n108=; ----- HELPER FUNCTIONS -----
n109=; Echo debug information to channel
n110=alias -l debug {
n111=  if (%mpc.debug) { echo 4 -a $1- }
n112=}
n113=
n114=; Strip HTML from socket text and return plain text
n115=alias -l nohtml {
n116=  var %nohtml = $regsubex($regsubex($1,/<.+?>/g,),/&#(\d+);/g,$fixentities(\t))
n117=  %nohtml = $replacecs(%nohtml,&laquo;,«,&raquo;,»,&bull;,)
n118=  %nohtml = $regsubex(%nohtml, /^\s+/, $null)
n119=  return %nohtml
n120=}
n121=
n122=; Create a formatted progress bar
n123=alias -l progress_bar {
n124=  var %pbars = $round($calc(($1 / $2) * 10),0)
n125=  var %i = 0
n126=  while (%i < %pbars) { var %cbars = %cbars $+ : | inc %i }
n127=  %i = 0
n128=  while (%i < $calc( 10 - %pbars)) { var %rbars = %rbars $+ - | inc %i }
n129=  return %col2 $+ $([) $+ %col2 $+ %cbars $+ %col1 $+ %rbars $+ %col2 $+ $(])
n130=}
n131=
n132=; Load configuration options hash from ini file
n133=alias -l mpchash {
n134=  if (!$hget(MPCDisplay)) {
n135=    hmake MPCDisplay
n136=    hload -i MPCDisplay addons/mpchc.ini mpc_vars
n137=  }
n138=}
n139=
n140=; Clean up temporary variables and hash tables
n141=alias -l cleanup {
n142=
n143=  debug cleanup: Free open hash tables
n144=  if ($hget(MPCVariables)) { hfree MPCVariables }
n145=
n146=  debug cleanup: Close open sockets
n147=  if ($sock(mpchc.np)) { sockclose mpchc.np }
n148=
n149=  debug cleanup: Unset variables
n150=  unset %mpc.*
n151=}
n152=
n153=; ----- SETTINGS DIALOG -----
n154=dialog MPCHCConfig {
n155=  title "MPC-HC Now Playing Display Configuration"
n156=  size -1 -1 167 52
n157=  option dbu
n158=  edit "", 1, 40   2 125 10, autohs
n159=  edit "", 2, 40  14 125 10, autohs
n160=  edit "", 3, 40  26 50  10, autohs
n161=  edit "", 4, 115 26 50  10, autohs
n162=  text "Default Host:", 11, 3  3 35 10, right
n163=  text "Default Port:", 12, 3 15 35 10, right
n164=  text "Prefix:", 13, 18 27 20 10, right
n165=  text "Suffix:", 14, 93 27 20 10, right
n166=  button "&Done", 500, 115 38 50 12, default ok
n167=}
n168=
n169=on *:dialog:MPCHCConfig:*:*:{
n170=  if ($devent != init && $devent != sclick && $devent != dclick && $devent != close) { halt }
n171=  if ($devent == init) {
n172=    mpchash
n173=    var %i = 0
n174=    while (%i <= 3) {
n175=      var %j = %i + 1
n176=      did -a MPCHCConfig %j $hget(MPCDisplay,%i)
n177=      inc %i
n178=    }
n179=  }
n180=  if ($devent == close) {
n181=    var %i = 0
n182=    while (%i <= 3) {
n183=      var %j = %i + 1
n184=      hadd MPCDisplay %i $did(MPCHCConfig,%j).text
n185=      inc %i
n186=    }
n187=    ; Save configuration options hash to ini file
n188=    hsave -i MPCDisplay addons/mpchc.ini mpc_vars
n189=  }
n190=}
n191=
n192=Menu menubar {
n193=  MPC-HC Now Playing Display:{ opendialog MPCHCConfig }
n194=}

[mpc_vars]
3=««
0=localhost
1=13579
2=»» 12MPC-HC
